# run test with python3 -m doctest -v ./tests/0-add_integer.txt

First import method to test
>>> add_integer = __import__('0-add_integer').add_integer

SUCCESS CASES:

Test signed and unsigned ints and floats:

    >>> print(add_integer(1, 2))
    3 
    >>> print(add_integer(100, -2))
    98
    >>> print(add_integer(2))
    100
    >>> print(add_integer(100.3, -2))
    98
    >>> print(add_integer(1.5, 2.9))
    3
    >>> print(add_integer(-2.9, 1))
    -1

Test use of default b=98 value:

    >>> print(add_integer(1))
    99
    >>> print(add_integer(-1))
    97

Test the type of the output:

    >>> print(type(add_integer(1, 2)))
    <class 'int'>
    >>> print(type(add_integer(1.5, 2.9)))
    <class 'int'>
    >>> print(type(add_integer(1, 2.9)))
    <class 'int'>
    >>> print(type(add_integer(1.5, 2)))
    <class 'int'>

FAIL CASES:

Test no args:
    >>> print(add_integer())
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'
    >>> print(add_integer(None))
    Traceback (most recent call last):
    ...
    TypeError: a must be an intege

Test extra args:

    >>> print(type(add_integer(1, 2,3)))
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test other data types:
    >>> print(add_integer("h"))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    >>> print(add_integer(0, [1, 2, 3]))
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Test max/min numbers Python can handle ("inf" is infinity):
    >>> print(add_integer(float("inf")))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
    >>> print(add_integer(int("inf")))
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int() with base 10: 'inf'
    >>> print(add_integer(2, float("inf")))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Test special float NaN in Python (not a number):
    >>> print(add_integer(float("NaN")))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

    